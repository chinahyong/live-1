apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply from: 'tinker.gradle'

def initVersionName() {
    return '1.0.0'
}

def depend = rootProject.ext.dependencies
def andr = rootProject.ext.android

java.util.Properties properties = new Properties()
properties.load(project.rootProject.file('config.properties').newDataInputStream())
String packageId = properties.getProperty('PACKAGEID', '0')

android {
    compileSdkVersion andr.compileSdkVersion
    buildToolsVersion andr.buildToolsVersion
    //图片后缀跟名称后缀不一样
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    // 用于支持 23以上(6.0)不支持HttpClient的问题
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId properties.getProperty("APPLICATION_ID." + packageId)
        minSdkVersion andr.minSdkVersion
        targetSdkVersion andr.targetSdkVersion
        versionCode 100
        //修改版本名称，切记还要修改tinkerId
        versionName initVersionName()
        // dex突破65535的限制,分包
        multiDexEnabled true
        multiDexKeepProguard file("keep_in_main_dex.txt")

        ndk {
            abiFilters("armeabi-v7a")
        }

        // 用于配置manifest
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : properties.getProperty("JPUSH_KEY." + packageId), //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.

                UMENG_APPKEY : properties.getProperty("UMENG_KEY." + packageId),

                TENCENT_APPID: 'tencent' + properties.getProperty("QQ_ID." + packageId),
                AMAP_KEY     : properties.getProperty("AMAP_KEY." + packageId)
        ]
        resValue('string', 'wx_id', properties.getProperty("WX_ID." + packageId))
        resValue('string', 'wx_secret', properties.getProperty("WX_SECRET." + packageId))
    }
//    dexOptions {
//        javaMaxHeapSize "4g"
//    }
    // 签名
    signingConfigs {
        config {
            keyAlias 'live'
            keyPassword 'live123'
            storeFile file("${rootDir}/app/keystore/live.keystore")
            storePassword 'live123'
            v2SigningEnabled false
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "error_log_enable", "true"
            buildConfigField "boolean", "debug_log_enable", "true"
//            applicationIdSuffix '.debug'
            // 是否进行混淆
            minifyEnabled false
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            debuggable true
            signingConfig signingConfigs.config         //用于给debug包签名
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "boolean", "error_log_enable", "false"
            buildConfigField "boolean", "debug_log_enable", "false"
//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk
//                        //  def fileName = "boohee_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
//                        def fileName = "guojiang_release_${defaultConfig.versionName}_${releaseTime()}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
            // 是否进行混淆
            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    // 移除lint检查的error
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        incremental true
//        javaMaxHeapSize "4g"
    }
    // 资源目录配置
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
            jni.srcDirs = []
        }
    }
    // multiDex分包需要设置的
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }
    //签名配置
    productFlavors {
    }

    //解决LinearAlloc ，LinearAlloc 主要用来管理 Dalvik 中 class 加载时的内存 INSTALL_FAILED_DEXOPT
    afterEvaluate {
        tasks.matching {
            it.name.startsWith('dex')
        }.each { dx ->
            if (dx.additionalParameters == null) {
                dx.additionalParameters = []
            }
            dx.additionalParameters += '--set-max-idx-number=48000'
            //--main-dex-list= 参数是一个类列表的文件，在该文件中的类会被打包在第一个 dex 中。
            //multidex.keep 里面列上需要打包到第一个 dex 的 class 文件，注意，如果需要混淆的话需要写混淆之后的 class 。
            dx.additionalParameters += "--main-dex-list=$projectDir/multidex.keep".toString()
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    // 编译libs目录下的所有jar包
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile depend.support
    compile depend.jpush
    compile depend.album[1]
    compile depend.ctiao_danmaku
    compile depend.baseLibrary
    compile depend.gson
    compile depend.butterknife
    // 下拉刷新
    compile depend.smartRefreshLayout
    // 图片选择器
    compile project(':album')
    //极验验证
    repositories { flatDir { dirs 'aars' } }
    compile(name: 'LiteAVSDK_Professional_3.5.2170', ext: 'aar')
    compile project(':effect-lib')
    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'

    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
}